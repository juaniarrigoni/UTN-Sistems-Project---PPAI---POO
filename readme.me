# Red Sísmica – PPAI 2025

**Proyecto Práctico de Aplicación Integrador – UTN FRC / FRVM**
**Materia:** Diseño de Sistemas de Información
**Grupo:** \[Número de grupo]

---

## Objetivo del proyecto

Implementar en Java el caso de uso **CU 23: Registrar resultado de revisión manual** del sistema Red Sísmica. Esta funcionalidad permite al **Analista en Sismos** revisar eventos sísmicos auto detectados y registrar el resultado de dicha revisión: **confirmación**, **rechazo** o **derivación a experto**.

El trabajo incluye:

* Modelado UML (clases de análisis, diagrama de secuencia, máquina de estados)
* Implementación orientada a objetos en Java
* Persistencia en base de datos SQLite
* Interfaz por consola

---

## Requisitos técnicos

### Software necesario

* [Java JDK 17 o superior](https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html)

  * Recomendado: instalador `.exe` (x64 Installer)
* [Git](https://git-scm.com/downloads)
* [DB Browser for SQLite (opcional)](https://sqlitebrowser.org/) para ver y editar la base manualmente
* Un IDE compatible con Java (al menos uno):

  * [IntelliJ IDEA](https://www.jetbrains.com/idea/)
  * [VS Code](https://code.visualstudio.com/) con extensiones Java
  * [Eclipse](https://www.eclipse.org/downloads/)

### Configuración de Java en Windows

1. Instalar Java desde el instalador `.exe`
2. Agregar al PATH (si no lo hizo automáticamente):

   * Ir a “Editar variables de entorno del sistema”
   * Agregar a `Path` esta línea (ajustar si es otra versión):

     ```
     ```

C:\Program Files\Java\jdk-17\bin

````
3. Verificar desde consola:
   ```bash
   java -version
   javac -version
````

Si ambos responden con una versión, está todo listo.

---

## Estructura del proyecto

```
red-sismica/
├── lib/                      # Librerías externas (ej. sqlite-jdbc)
│   └── sqlite-jdbc-3.42.0.0.jar
├── src/
│   ├── model/               # Clases del dominio (EventoSismico, Estado, Usuario, etc.)
│   ├── controller/          # Gestores de caso de uso (GestorRevisionManual)
│   ├── boundary/            # Pantalla simulada por consola (PantallaRevisionManual)
│   ├── persistence/         # DAOs, acceso SQLite, utilitarios de conexión
│   ├── utils/               # Enumeradores, validador, constantes
│   └── Main.java            # Clase principal del sistema
├── out/                     # Carpeta generada con archivos compilados
├── database/
│   └── red_sismica.db       # Base SQLite preconfigurada
├── script.sql               # Script SQL para crear y poblar la base
├── README.md
└── .gitignore
```

---

## Compilación y ejecución

### Compilar

Desde la carpeta raíz del proyecto:

```powershell
javac -cp "lib/sqlite-jdbc-3.42.0.0.jar" -d out `
  "src/Main.java" `
  "src/model/EventoSismico.java" `
  "src/persistence/ConexionBD.java" `
  "src/boundary/PantallaRevisionManual.java" `
  "src/persistence/EventoSismicoDAO.java" `
  "src/utils/Estado.java"
```

> Asegurarse de que todos los nombres de carpeta estén bien escritos (`persistence` con "e").

### Ejecutar

```powershell
java -cp "out;lib/sqlite-jdbc-3.42.0.0.jar" src.Main
```

> PowerShell usa `;` para separar rutas. En Linux/Mac, cambiar por `:`.

### Notas

* Durante la ejecución puede aparecer una advertencia de seguridad (`WARNING: A restricted method in java.lang.System...`). No afecta el funcionamiento.
* No es necesario aceptar ni instalar nada adicional para correr el sistema.

### ¿Qué se debe subir al repositorio?

Al subir el proyecto, se deben incluir:

* Todas las carpetas del código fuente (`src/`, `database/`, `lib/`)
* El archivo `script.sql`
* El archivo `README.md`

No se deben subir:

* Archivos compilados (`.class`) ni la carpeta `out/` (se puede incluir en `.gitignore`)

---

## Inicialización de la base de datos

* Si no existe `red_sismica.db`, podés generarla manualmente con DB Browser o programáticamente.

### Usar DB Browser for SQLite:

1. Abrir DB Browser y crear una nueva base de datos llamada `red_sismica.db` (guardarla en la carpeta `database/` del proyecto).
2. Ir a la pestaña “Execute SQL” y pegar el contenido de `script.sql`
3. Ejecutar el script y luego hacer clic en “Write Changes” para guardar los datos

---

## Navegación del sistema por consola

* Al iniciar el sistema, se muestra un menú con opciones.
* El analista puede listar eventos sísmicos pendientes.
* Luego puede registrar el resultado de revisión para un evento.
* El sistema actualiza el estado del evento en la base y guarda el historial de cambios.

---

## Estado del desarrollo

* [x] Modelado UML de clases, secuencia y estados
* [x] Estructura de carpetas base y archivos principales
* [x] Conexión a base de datos SQLite funcional
* [x] Compilación y ejecución funcional confirmada
* [ ] Implementación completa del CU23 (en progreso)
* [ ] Validaciones de negocio (en progreso)
* [ ] Pruebas del flujo (pendiente)

---

## Integrantes del grupo

* \[Nombre Apellido – Legajo – Mail]
* \[Nombre Apellido – Legajo – Mail]
* \[Nombre Apellido – Legajo – Mail]

---

## Historial de entregas

| Fecha          | Entrega                    | Descripción                        |
| -------------- | -------------------------- | ---------------------------------- |
| 2024-06-04     | Entrega 1 – Modelado UML   | Clases, secuencia, estados         |
| 2024-06-07     | Entrega 2 – Código inicial | Setup + conexión a BD + estructura |
| \[por definir] | Entrega final              | Flujo completo CU23 implementado   |

---

## Referencias

* Especificación de Requerimientos de Software (ERS Red Sísmica)
* Descripción del Dominio Red Sísmica
* Modelo de Dominio oficial provisto por la cátedra
* Material y criterios de entrega oficial PPAI 2025
